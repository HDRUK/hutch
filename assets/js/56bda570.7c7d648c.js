"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1624],{8570:(e,t,o)=>{o.d(t,{Zo:()=>c,kt:()=>d});var n=o(79);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var l=n.createContext({}),u=function(e){var t=n.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),f=u(o),d=r,h=f["".concat(l,".").concat(d)]||f[d]||p[d]||i;return o?n.createElement(h,a(a({ref:t},c),{},{components:o})):n.createElement(h,a({ref:t},c))}));function d(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=o.length,a=new Array(i);a[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var u=2;u<i;u++)a[u]=o[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,o)}f.displayName="MDXCreateElement"},5028:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var n=o(2203),r=(o(79),o(8570));const i={sidebar_position:3},a="WorkflowHub in a TRE",s={unversionedId:"users/getting-started/configuration/workflowhub-spoof",id:"users/getting-started/configuration/workflowhub-spoof",title:"WorkflowHub in a TRE",description:"This page assumes you are using Ubuntu Linux as your OS and that you will have root or sudo privileges.",source:"@site/docs/users/getting-started/configuration/workflowhub-spoof.md",sourceDirName:"users/getting-started/configuration",slug:"/users/getting-started/configuration/workflowhub-spoof",permalink:"/hutch/docs/users/getting-started/configuration/workflowhub-spoof",draft:!1,editUrl:"https://github.com/hdruk/hutch/tree/main/website/docs/users/getting-started/configuration/workflowhub-spoof.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"userGuide",previous:{title:"Hutch Agent",permalink:"/hutch/docs/users/getting-started/configuration/agent"},next:{title:"Docker Images in a TRE",permalink:"/hutch/docs/users/getting-started/configuration/docker-hub-spoof"}},l={},u=[{value:"Nexus workflow store",id:"nexus-workflow-store",level:2},{value:"Creating a file store on Nexus",id:"creating-a-file-store-on-nexus",level:3},{value:"Upload trusted workflows to Nexus",id:"upload-trusted-workflows-to-nexus",level:3},{value:"WorkflowHub",id:"workflowhub",level:2},{value:"Re-routing traffic to <code>localhost</code>",id:"re-routing-traffic-to-localhost",level:3},{value:"Trust issues",id:"trust-issues",level:3},{value:"Re-routing to the workflow store",id:"re-routing-to-the-workflow-store",level:3}],c={toc:u};function p(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"workflowhub-in-a-tre"},"WorkflowHub in a TRE"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"This page assumes you are using Ubuntu Linux as your OS and that you will have ",(0,r.kt)("inlineCode",{parentName:"p"},"root")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"sudo")," privileges.")),(0,r.kt)("p",null,"When running Hutch in a secure environment with no internet access, you will need to redirect links to some external resources to your internal equivalents. This page will explain how to set up a WorkflowHub alternative using Sonatype Nexus as the store."),(0,r.kt)("h2",{id:"nexus-workflow-store"},"Nexus workflow store"),(0,r.kt)("p",null,"Hutch comes with a ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose")," service to run an instance Nexus. This service runs its web portal on port ",(0,r.kt)("inlineCode",{parentName:"p"},"8081"),". You can view it by navigating to ",(0,r.kt)("inlineCode",{parentName:"p"},"your-host:8081")," in your web browser, where ",(0,r.kt)("inlineCode",{parentName:"p"},"your-host")," is the IP address or domain name of the machine being used to run Hutch."),(0,r.kt)("h3",{id:"creating-a-file-store-on-nexus"},"Creating a file store on Nexus"),(0,r.kt)("p",null,"Create a file store on your Nexus instance called ",(0,r.kt)("inlineCode",{parentName:"p"},"hutchfiles")," following ",(0,r.kt)("a",{parentName:"p",href:"/hutch/docs/devs/external-systems/nexus/file-store"},"these instructions"),"."),(0,r.kt)("h3",{id:"upload-trusted-workflows-to-nexus"},"Upload trusted workflows to Nexus"),(0,r.kt)("p",null,"Navigate to the upload page for ",(0,r.kt)("inlineCode",{parentName:"p"},"hutchfiles")," on your Nexus instance and upload the workflow files. WorkflowHub workflows have numeric IDs (1, 2, 3, ...) which are found in their URLs on WorkflowHub. Let's name the workflows like ",(0,r.kt)("inlineCode",{parentName:"p"},"id.crate.zip"),", e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"123.crate.zip")," and save them to the ",(0,r.kt)("inlineCode",{parentName:"p"},"workflows")," directory under ",(0,r.kt)("inlineCode",{parentName:"p"},"hutchfiles"),"."),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("img",{src:o(4301).Z,width:"1890",height:"958"})),(0,r.kt)("h2",{id:"workflowhub"},"WorkflowHub"),(0,r.kt)("h3",{id:"re-routing-traffic-to-localhost"},"Re-routing traffic to ",(0,r.kt)("inlineCode",{parentName:"h3"},"localhost")),(0,r.kt)("p",null,"To redirect traffic to WorkflowHub to ",(0,r.kt)("inlineCode",{parentName:"p"},"localhost")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"127.0.0.1"),", edit your ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/hosts")," file by adding the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# Redirect WorkflowHub traffic\n127.0.0.1 workflowhub.eu\n")),(0,r.kt)("h3",{id:"trust-issues"},"Trust issues"),(0,r.kt)("p",null,"To get Hutch to trust calls to the redirected traffic, you need to generate a self-signed SSL certificate and add it to your machine's trust store. Perform the following steps in the home directory of the user running Hutch, e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"/home/foo"),"."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Generate the certificate.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.crt -sha256 -days 365\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},'You will be asked for some information about your organisation etc. Most of this can be left blank except for the "Common Name" which ',(0,r.kt)("strong",{parentName:"p"},"must")," be set to ",(0,r.kt)("inlineCode",{parentName:"p"},"workflowhub.eu"),".")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Decrypt your private key.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"openssl rsa -in key.pem -out new-key.pem && mv new-key.pem key.pem \n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Add the certificate to trust store.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cp cert.crt /usr/share/ca-certificates/cert.crt\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"This command should be executed as ",(0,r.kt)("inlineCode",{parentName:"p"},"root"),".")),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"Activate the new certificate.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"dpkg-reconfigure ca-certificates\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"This command should be executed as ",(0,r.kt)("inlineCode",{parentName:"p"},"root"),".")),(0,r.kt)("h3",{id:"re-routing-to-the-workflow-store"},"Re-routing to the workflow store"),(0,r.kt)("p",null,"When your workflow looks for, say, ",(0,r.kt)("inlineCode",{parentName:"p"},"https://workflowhub.eu/workflows/488/ro_crate?version=2"),", the changes in ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/hosts")," will redirect the traffic to your local machine. We will use Nginx to look up the workflow on our Nexus instance and serve it back to us. In the example ",(0,r.kt)("inlineCode",{parentName:"p"},"nginx.conf")," file below, the first ",(0,r.kt)("inlineCode",{parentName:"p"},"location")," block, matches tries to match the WorkflowHub URL and strip out the relevant workflow ID. It then proxies to the Nexus instance, which serves back the file."),(0,r.kt)("p",null,"This example ",(0,r.kt)("inlineCode",{parentName:"p"},"nginx.conf")," file can be used with the ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," file in the Hutch repo. Copy the text below into a file called ",(0,r.kt)("inlineCode",{parentName:"p"},"nginx.conf")," into the home directory of the user running Hutch, e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"/home/foo/nginx.conf"),". It should be next to ",(0,r.kt)("inlineCode",{parentName:"p"},"key.pem")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"cert.crt")," from the previous section. ",(0,r.kt)("strong",{parentName:"p"},"You do not need to modify this example code. It is designed to work with the ",(0,r.kt)("inlineCode",{parentName:"strong"},"nginx")," service in the ",(0,r.kt)("inlineCode",{parentName:"strong"},"docker-compose.yml")," file.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# nginx.conf\nevents {\n  worker_connections  1024;\n}\n\nhttp {\n  server {\n    listen 443 ssl;\n    ssl_certificate /etc/nginx/cert.crt;\n    ssl_certificate_key /etc/nginx/key.pem;\n\n    # capture workflow ID and redirect the internal store\n    location ~ ^\\/workflows\\/([0-9]+)\\/ro_crate$ {\n      proxy_pass http://nexus:8081/repository/hutchfiles/workflows/$1.crate.zip;\n    }\n\n    # root location must be defined for the set up to work\n    location / {\n      proxy_pass http://nexus:8081/service/rest/repository/browse/hutchfiles/;\n    }\n  }\n}\n")))}p.isMDXComponent=!0},4301:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/upload-workflows-e70d7b4e4fb766e9328afcb9cef688ff.png"}}]);