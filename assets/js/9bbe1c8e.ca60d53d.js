"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[344],{8570:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>c});var a=t(79);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(t),c=r,h=u["".concat(s,".").concat(c)]||u[c]||m[c]||o;return t?a.createElement(h,i(i({ref:n},p),{},{components:t})):a.createElement(h,i({ref:n},p))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var d=2;d<o;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},538:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var a=t(2203),r=(t(79),t(8570));const o={sidebar_position:3},i="Rules mapping",l={unversionedId:"devs/external-systems/bcos/rules-mapping",id:"devs/external-systems/bcos/rules-mapping",title:"Rules mapping",description:"This document describes how the rules in a BC|OS query map to tables in a target OMOP Data Source, in the contexts Hutch is interested in (which ultimately is everything a BC|OS query supports).",source:"@site/docs/devs/external-systems/bcos/rules-mapping.md",sourceDirName:"devs/external-systems/bcos",slug:"/devs/external-systems/bcos/rules-mapping",permalink:"/hutch/docs/devs/external-systems/bcos/rules-mapping",draft:!1,editUrl:"https://github.com/hdruk/hutch/tree/main/website/docs/devs/external-systems/bcos/rules-mapping.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"devGuide",previous:{title:"Endpoint Schema",permalink:"/hutch/docs/devs/external-systems/bcos/endpoint-schema"},next:{title:"Open API (Swagger)",permalink:"/hutch/docs/devs/external-systems/bcos/open-api"}},s={},d=[{value:"Available tables",id:"available-tables",level:2},{value:"Rules",id:"rules",level:2},{value:"Condition",id:"condition",level:3},{value:"With age/time condition",id:"with-agetime-condition",level:4},{value:"With secondary modifiers",id:"with-secondary-modifiers",level:4},{value:"With both age/time condition and secondary modifiers",id:"with-both-agetime-condition-and-secondary-modifiers",level:4},{value:"Measurement",id:"measurement",level:3},{value:"Medication, Observation, Person &amp; Procedure",id:"medication-observation-person--procedure",level:3}],p={toc:d};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"rules-mapping"},"Rules mapping"),(0,r.kt)("p",null,"This document describes how the rules in a BC|OS query map to tables in a target OMOP Data Source, in the contexts Hutch is interested in (which ultimately is everything a BC|OS query supports)."),(0,r.kt)("p",null,"The information here was gleaned from a combination of BC Platforms documentation, conversations with their developers, and reverse engineering."),(0,r.kt)("h2",{id:"available-tables"},"Available tables"),(0,r.kt)("p",null,"Here are the direct mappings from queryable targets in the BC|OS GUI to OMOP Tables."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"GUI Category"),(0,r.kt)("th",{parentName:"tr",align:null},"OMOP Table"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Condition"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ConditionOccurrence"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Measurement"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Measurement"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Medication"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"DrugExposure"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Observation"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Observation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Person"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Person"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Procedure"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ProcedureOccurrence"))))),(0,r.kt)("h2",{id:"rules"},"Rules"),(0,r.kt)("h3",{id:"condition"},"Condition"),(0,r.kt)("p",null,"The concept ID in ",(0,r.kt)("inlineCode",{parentName:"p"},'"value"')," maps to the ",(0,r.kt)("inlineCode",{parentName:"p"},"condition_concept_id")," column in ",(0,r.kt)("inlineCode",{parentName:"p"},"ConditionOccurrence"),". "),(0,r.kt)("p",null,"In order to handle an age constraint, you need to join to ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," table where ",(0,r.kt)("inlineCode",{parentName:"p"},"Person.birth_datetime")," meets the time condition in ",(0,r.kt)("inlineCode",{parentName:"p"},'"time"'),". In order to handle a time condition, you need to compare the ",(0,r.kt)("inlineCode",{parentName:"p"},"condition_start_date")," column. To handle secondary modifiers, you need to look up the ",(0,r.kt)("inlineCode",{parentName:"p"},"condition_type_concept_id"),"."),(0,r.kt)("h4",{id:"with-agetime-condition"},"With age/time condition"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'// age condition\n\n// age > 18 years\n{\n  "varname" : "OMOP",\n  "type" : "TEXT",\n  "oper" : "=",\n  "value" : "4084167",\n  "time" : "18|:AGE:Y",\n  "seconady_modifier" : [ ]\n}\n\n// age < 18 years\n{\n  "varname" : "OMOP",\n  "type" : "TEXT",\n  "oper" : "=",\n  "value" : "4084167",\n  "time" : "|18:AGE:Y",\n  "seconady_modifier" : [ ]\n}\n\n// time condition\n\n// less than 18 months ago\n{\n  "varname" : "OMOP",\n  "type" : "TEXT",\n  "oper" : "=",\n  "value" : "4084167",\n  "time" : "|18:TIME:M",\n  "seconady_modifier" : [ ]\n}\n\n// more than 18 months ago\n{\n  "varname" : "OMOP",\n  "type" : "TEXT",\n  "oper" : "=",\n  "value" : "4084167",\n  "time" : "18|:TIME:M",\n  "seconady_modifier" : [ ]\n}\n')),(0,r.kt)("h4",{id:"with-secondary-modifiers"},"With secondary modifiers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "varname" : "OMOP",\n  "type" : "TEXT",\n  "oper" : "=",\n  "value" : "4084167",\n  "seconady_modifier" : [ "32020" ]\n}\n')),(0,r.kt)("h4",{id:"with-both-agetime-condition-and-secondary-modifiers"},"With both age/time condition and secondary modifiers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "varname" : "OMOP",\n  "type" : "TEXT",\n  "oper" : "=",\n  "value" : "4084167",\n  "time" : "18|:TIME:M",\n  "seconady_modifier" : [ "32020" ]\n}\n')),(0,r.kt)("h3",{id:"measurement"},"Measurement"),(0,r.kt)("p",null,"Measurements come as numeric rules (",(0,r.kt)("inlineCode",{parentName:"p"},'"NUM"'),") with an upper and/or lower bound in their ",(0,r.kt)("inlineCode",{parentName:"p"},'"value"')," key. The upper and lower bounds can each be ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," or a decimal number (e.g. 10.0, 0.1, etc.). These values can be extracted and compared to the ",(0,r.kt)("inlineCode",{parentName:"p"},"value_as_number")," column. The combinations or ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," and non-",(0,r.kt)("inlineCode",{parentName:"p"},"null")," bounds are shown below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'// measurement with no lower or upper bound\n// value_as_number = x\n{\n  "varname" : "OMOP=3006923",\n  "type" : "NUM",\n  "oper" : "=",\n  "value" : "null..null"\n}\n\n// measurement with lower bound only\n// value_as_number >= x\n{\n  "varname" : "OMOP=3006923",\n  "type" : "NUM",\n  "oper" : "=",\n  "value" : "10..null"\n}\n\n// measurement with upper bound only\n// value_as_number <= x\n{\n  "varname" : "OMOP=3006923",\n  "type" : "NUM",\n  "oper" : "=",\n  "value" : "null..20"\n}\n\n// measurement with lower and upper bounds\n// x <= value_as_number <= y\n{\n  "varname" : "OMOP=3006923",\n  "type" : "NUM",\n  "oper" : "=",\n  "value" : "10..20"\n}\n')),(0,r.kt)("h3",{id:"medication-observation-person--procedure"},"Medication, Observation, Person & Procedure"),(0,r.kt)("p",null,"To query these tables without an age/time rule, you query ",(0,r.kt)("inlineCode",{parentName:"p"},"DrugExposure.drug_concept_id"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Observation.observation_concept_id"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Person.ethnicity_concept_id"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Person.gender_concept_id"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Person.race_concept_id")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ProcedureOccurrence.procedure_concept_id"),". "),(0,r.kt)("p",null,"In order to handle an age constraint, you need to join to ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," table where ",(0,r.kt)("inlineCode",{parentName:"p"},"Person.birth_datetime")," meets the time condition in ",(0,r.kt)("inlineCode",{parentName:"p"},'"time"'),". To handle time constraints on Medication, compare the time value to ",(0,r.kt)("inlineCode",{parentName:"p"},"DrugExposure.drug_exposure_start_date"),". For Observation, compare ",(0,r.kt)("inlineCode",{parentName:"p"},"Observation.observation_date"),". For Procedure, compare ",(0,r.kt)("inlineCode",{parentName:"p"},"ProcedureOccurrence.procedure_date"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'// without an age/time constraint\n{\n  "varname" : "OMOP",\n  "type" : "TEXT",\n  "oper" : "=",\n  "value" : "3006923"\n}\n\n//with an age/time constraint\n{\n  "varname" : "OMOP",\n  "type" : "TEXT",\n  "oper" : "=",\n  "value" : "4084167",\n  "time" : "18|:AGE:Y"\n}\n')))}m.isMDXComponent=!0}}]);