"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[831],{38570:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(70079);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),f=i,h=p["".concat(s,".").concat(f)]||p[f]||d[f]||a;return n?r.createElement(h,o(o({ref:t},u),{},{components:n})):r.createElement(h,o({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},49166:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(52203),i=(n(70079),n(38570));const a={sidebar_position:2},o="Hutch Agent",l={unversionedId:"getting-started/configuration/agent",id:"getting-started/configuration/agent",title:"Hutch Agent",description:"Hutch can be configured using the following source in the usual .NET way, in order of precedence:",source:"@site/docs/getting-started/configuration/agent.md",sourceDirName:"getting-started/configuration",slug:"/getting-started/configuration/agent",permalink:"/hutch/docs/getting-started/configuration/agent",draft:!1,editUrl:"https://github.com/hdruk/hutch/tree/main/website/docs/getting-started/configuration/agent.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docs",previous:{title:"Configuration",permalink:"/hutch/docs/category/configuration"},next:{title:"WorkflowHub in a TRE",permalink:"/hutch/docs/getting-started/configuration/workflowhub-spoof"}},s={},c=[{value:"Available values",id:"available-values",level:2},{value:"Guidance",id:"guidance",level:2},{value:"Intermediary Store",id:"intermediary-store",level:3},{value:"Workflow Executor",id:"workflow-executor",level:3}],u={toc:c};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"hutch-agent"},"Hutch Agent"),(0,i.kt)("p",null,"Hutch can be configured using the following source in ",(0,i.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration"},"the usual .NET way"),", in order of precedence:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"appsettings.json")," adjacent to the binary (",(0,i.kt)("inlineCode",{parentName:"li"},"HutchAgent.dll"),")"),(0,i.kt)("li",{parentName:"ul"},"Environment Variables (with double underscore ",(0,i.kt)("inlineCode",{parentName:"li"},"__")," as a hierarchical separator)"),(0,i.kt)("li",{parentName:"ul"},"Command line arguments"),(0,i.kt)("li",{parentName:"ul"},"(.NET User Secrets in development)")),(0,i.kt)("h2",{id:"available-values"},"Available values"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  // Kestrel options e.g. port bindings\n  // By default Hutch binds on all interfaces on specific non-privileged ports\n  // You can change the binding configuration\n  // but Hutch should not be bound on privileged ports (< 1024) if you don\'t want to run it evelated\n  // and Hutch should not be bound on 80/443 in airgapped environments where nginx is used to proxy workflow fetching (as nginx will use those ports)\n  "Kestrel": {\n    "Endpoints": {\n      "Http": {\n        "Url": "http://0.0.0.0:5209"\n      },\n      "Https": {\n        "Url": "https://0.0.0.0:7239"\n      }\n    }\n  },\n\n  // Local working paths used by Hutch itself\n  "Paths": {\n    "WorkingDirectoryBase": "hutch-workdir", // Hutch\'s working directory\n    "Jobs": "jobs" // Sub-directory for per-job working directories\n  },\n\n  // Configuration for Hutch\'s internal Action Queue (RabbitMQ)\n  "Queue": {\n    "Hostname": "", // Rabbit MQ Host\n    "Port": 0, // Rabbit MQ Port\n    "UserName": "", // Rabbit MQ User\n    "Password": "", // Rabbit MQ Password\n\n    "QueueName": "WorkflowJobActions",\n    "PollingIntervalSeconds": 5, // How often Hutch checks the internal queue for new Actions\n    "MaxParallelism": 10 // How many actions from the queue will Hutch run simultaneously\n  },\n\n  // MinIO Intermediary Store Defaults\n  // These are are used for Egress in Standalone Mode\n  // And as a fallback for Submissions/Egress when only partial bucket details are provided.\n  "StoreDefaults": {\n    "Host": "localhost:9000",\n    "AccessKey": "accesskey",\n    "SecretKey": "secretkey",\n    "Secure": false,\n    "Bucket": "hutch.bucket"\n  },\n\n  "IdentityProvider": {\n    "OpenIdBaseUrl": "", // e.g. https://keycloak.tre.com/realms/tre-fx\n    \n    // If you want Hutch to use OIDC for Minio credentials,\n    // this must match the Minio OIDC Client ID!\n    // Otherwise it can be a Hutch specific client\n    "ClientId": "",\n\n    // May be optional depending on the IdP client config\n    // If required and using OIDC for Minio credentials,\n    // this must match the Minio OIDC Client Secret!\n    "ClientSecret": "",\n    \n    // User credentials Hutch will act on behalf of\n    "Username": "",\n    "Password": ""\n  },\n\n  // Configuration for tracking Workflow Execution\n  // Currently WfExS specific\n  "WorkflowExecutor": {\n    "ExecutorPath": "/WfExS-backend",\n    "VirtualEnvironmentPath": "/WfExS-backend/.pyWEenv/bin/activate",\n    "LocalConfigPath": "workflow_examples/local_config.yaml",\n    "ContainerEngine": "docker", // other valid options are "singularity" and "podman"\n\n    // The below are more for development / debugging\n\n    // If a path is provided, Hutch will skip Workflow Execution altogether\n    // and instead use the zip file from this path as if it were the execution output\n    "SkipExecutionUsingOutputFile": "path/to/exection.crate.zip",\n\n    // Really we always want a full crate, but some wfexs configs\n    // particularly with certain container engines\n    // are unreliable with `--full`` on or off, so it can be configured for testing.\n    "SkipFullProvenanceCrate": false,\n    \n    // by default Hutch detaches from the wfexs process once it starts it,\n    // to free up threads.\n    // This forces Hutch to keep the executing thread attached to the wfexs process\n    // which means you can see stdout/stderr from wfexs in realtime,\n    // and better understand the circumstances under which wfexs exited.\n    // Intended for dev/test use while executing one job at a time.\n    "RemainAttached": false,\n  },\n\n  // Connection strings for different services\n  "ConnectionStrings": {\n    // The database tracking the jobs in the agent\n    "AgentDb": "Data Source=HutchAgent.db"\n  },\n\n  // Configurable details to add to published Results Crates.\n  "CratePublishing": {\n    "Publisher": {\n      "Id": "" // Desired Identifier (typically URL) for the Publisher in Results Crates.\n    },\n    "License": {\n      "Uri": "", // A URI to be used as th License `@id` in Results crate metadata\n      "Properties": {} // Any valid CreativeWork properties as desirable to be included for the License.\n    }\n  },\n\n  // Development Flags\n  // These are really intended for development or debugging use\n  // and their continued presence cannot be relied upon from one build to the next!\n  "Flags": {\n    "StandaloneMode": false, // Hutch will skip TRE Controller interactions\n    "RetainFailures": false, // Hutch will not clean up working directories or database records for jobs that fail.\n    "\n  }\n}\n')),(0,i.kt)("h2",{id:"guidance"},"Guidance"),(0,i.kt)("h3",{id:"intermediary-store"},"Intermediary Store"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Primarily for Standalone mode or as a fallback; you may configure MinIO connection details to a default store here.")),(0,i.kt)("h3",{id:"workflow-executor"},"Workflow Executor"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ExecutorPath")," must be the directory where WfExS is installed.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"VirtualEnvironmentPath")," must be the path to the ",(0,i.kt)("inlineCode",{parentName:"p"},"activate")," script in the WfExS install directory, e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"/path/to/WfExS-backend/.pyWEenv/bin/activate"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"LocalConfigPath")," is the path of a YAML file describing your WfExS installation."))))}d.isMDXComponent=!0}}]);