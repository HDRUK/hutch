"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[990],{38570:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(70079);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(n),h=a,m=d["".concat(c,".").concat(h)]||d[h]||p[h]||i;return n?r.createElement(m,l(l({ref:t},u),{},{components:n})):r.createElement(m,l({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},67281:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var r=n(52203),a=(n(70079),n(38570));const i={},l=void 0,o={unversionedId:"external-systems/keycloak/index",id:"external-systems/keycloak/index",title:"index",description:"Keycloak is a popular Open ID Connect (OIDC) Identity Provider.",source:"@site/docs/external-systems/keycloak/index.md",sourceDirName:"external-systems/keycloak",slug:"/external-systems/keycloak/",permalink:"/hutch/docs/external-systems/keycloak/",draft:!1,editUrl:"https://github.com/hdruk/hutch/tree/main/website/docs/external-systems/keycloak/index.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"External Systems",permalink:"/hutch/docs/category/external-systems"},next:{title:"MinIO",permalink:"/hutch/docs/external-systems/minio/"}},c={},s=[{value:"Further configuration",id:"further-configuration",level:2},{value:"Create a Realm",id:"create-a-realm",level:3},{value:"Create a Client for Hutch",id:"create-a-client-for-hutch",level:3},{value:"Create (a) User(s)",id:"create-a-users",level:3},{value:"Configure Hutch",id:"configure-hutch",level:3}],u={toc:s};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Keycloak is a popular Open ID Connect (OIDC) Identity Provider."),(0,a.kt)("p",null,"The TRE-FX stack uses OIDC Token auth for:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The Workflow Executor (i.e. Hutch) to communicate with the TRE Controller API"),(0,a.kt)("li",{parentName:"ul"},"The Workflow Executor (i.e. Hutch) to communicate with the Intermediary Store (MinIO)")),(0,a.kt)("p",null,"Hutch can bypass the need for OIDC Token auth when in Standalone mode (i.e. not communicating with a TRE Controller API) and/or if access credentials are passed directly for the Intermediary Store (e.g. at job submission) (or configured in the ",(0,a.kt)("inlineCode",{parentName:"p"},"StoreDefaults")," config)."),(0,a.kt)("p",null,"To use KeyCloak, some configuration is needed."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose")," in the Hutch repo has an example of a keycloak instance suitable for development."),(0,a.kt)("p",null,"There is some futher configuration once this is running before it can be used."),(0,a.kt)("h2",{id:"further-configuration"},"Further configuration"),(0,a.kt)("h3",{id:"create-a-realm"},"Create a Realm"),(0,a.kt)("p",null,"Minio in the sample ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose")," expects the realm to be called ",(0,a.kt)("inlineCode",{parentName:"p"},"hutch-dev"),"."),(0,a.kt)("h3",{id:"create-a-client-for-hutch"},"Create a Client for Hutch"),(0,a.kt)("p",null,"NOTE: You may wish to re-use the same client for Hutch and MinIO, since MinIO will only accept token from Hutch if they were requested using the MinIO Client Credentials."),(0,a.kt)("p",null,"General Settings:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"type: ",(0,a.kt)("inlineCode",{parentName:"li"},"OpenID Connect")),(0,a.kt)("li",{parentName:"ul"},"client id: e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"hutch-agent"))),(0,a.kt)("p",null,"Capability Config:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Client authentication: ",(0,a.kt)("inlineCode",{parentName:"li"},"ON")),(0,a.kt)("li",{parentName:"ul"},"Authentication Flow:",(0,a.kt)("ul",{parentName:"li",className:"contains-task-list"},(0,a.kt)("li",{parentName:"ul",className:"task-list-item"},(0,a.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Direct access grants",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},'This is OIDC\'s "Resource Owner Password Credentials Grant" and is currently all Hutch supports, because MinIO and the TRE Controller API expect user tokens, not client ones.')))))),(0,a.kt)("p",null,"Login Settings:"),(0,a.kt)("p",null,"not sure what is needed here as we aren't doing an interactive user login flow..."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Root URL should be Hutch's configured URL e.g. for development ",(0,a.kt)("inlineCode",{parentName:"li"},"http://host.docker.internal:5209")),(0,a.kt)("li",{parentName:"ul"},"Most other settings are URLs and for development can just be wildcarded with ",(0,a.kt)("inlineCode",{parentName:"li"},"*"))),(0,a.kt)("h3",{id:"create-a-users"},"Create (a) User(s)"),(0,a.kt)("p",null,"Both MinIO and the TRE Controller API currently expect user tokens, so Hutch currently must have a user to get tokens for, which it does via the Password Grant Flow."),(0,a.kt)("p",null,"Additionally it's worth being aware that the TRE Controller expects an ",(0,a.kt)("strong",{parentName:"p"},"access token")," (so in future Hutch could use the Client Credentials flow), but Minio requires an ",(0,a.kt)("strong",{parentName:"p"},"identity token"),"."),(0,a.kt)("h3",{id:"configure-hutch"},"Configure Hutch"),(0,a.kt)("p",null,"After creating the client, the Credentials tab can be used to generate or view the client secret."),(0,a.kt)("p",null,"Hutch can then be configured with"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"the keycloak URL e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"localhost:9090")),(0,a.kt)("li",{parentName:"ul"},"its client id e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"hutch-agent")),(0,a.kt)("li",{parentName:"ul"},"its client secret"),(0,a.kt)("li",{parentName:"ul"},"a username and password for a user to get a token on behalf of")))}p.isMDXComponent=!0}}]);