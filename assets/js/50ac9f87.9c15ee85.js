"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[242],{8570:(n,e,t)=>{t.d(e,{Zo:()=>c,kt:()=>m});var i=t(79);function s(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,i)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){s(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function a(n,e){if(null==n)return{};var t,i,s=function(n,e){if(null==n)return{};var t,i,s={},r=Object.keys(n);for(i=0;i<r.length;i++)t=r[i],e.indexOf(t)>=0||(s[t]=n[t]);return s}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(i=0;i<r.length;i++)t=r[i],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(s[t]=n[t])}return s}var p=i.createContext({}),d=function(n){var e=i.useContext(p),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},c=function(n){var e=d(n.components);return i.createElement(p.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return i.createElement(i.Fragment,{},e)}},l=i.forwardRef((function(n,e){var t=n.components,s=n.mdxType,r=n.originalType,p=n.parentName,c=a(n,["components","mdxType","originalType","parentName"]),l=d(t),m=s,y=l["".concat(p,".").concat(m)]||l[m]||u[m]||r;return t?i.createElement(y,o(o({ref:e},c),{},{components:t})):i.createElement(y,o({ref:e},c))}));function m(n,e){var t=arguments,s=e&&e.mdxType;if("string"==typeof n||s){var r=t.length,o=new Array(r);o[0]=l;var a={};for(var p in e)hasOwnProperty.call(e,p)&&(a[p]=e[p]);a.originalType=n,a.mdxType="string"==typeof n?n:s,o[1]=a;for(var d=2;d<r;d++)o[d]=t[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}l.displayName="MDXCreateElement"},635:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var i=t(2203),s=(t(79),t(8570));const r={sidebar_position:4},o="Open API (Swagger)",a={unversionedId:"devs/external-systems/bcos/open-api",id:"devs/external-systems/bcos/open-api",title:"Open API (Swagger)",description:"The best way to use the Open API spec is via the GUI on your instance of BC|OS:",source:"@site/docs/devs/external-systems/bcos/open-api.md",sourceDirName:"devs/external-systems/bcos",slug:"/devs/external-systems/bcos/open-api",permalink:"/hutch/docs/devs/external-systems/bcos/open-api",draft:!1,editUrl:"https://github.com/hdruk/hutch/tree/main/website/docs/devs/external-systems/bcos/open-api.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"devGuide",previous:{title:"Rules mapping",permalink:"/hutch/docs/devs/external-systems/bcos/rules-mapping"},next:{title:"Distribution Queries",permalink:"/hutch/docs/devs/external-systems/bcos/distribution-queries"}},p={},d=[{value:"JSON Snapshot",id:"json-snapshot",level:3}],c={toc:d};function u(n){let{components:e,...t}=n;return(0,s.kt)("wrapper",(0,i.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"open-api-swagger"},"Open API (Swagger)"),(0,s.kt)("p",null,"The best way to use the Open API spec is via the GUI on your instance of BC|OS:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"http(s)://<rquest-domain(:port)>/bcos-rest/swagger-ui.html#/\n")),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"API Credentials may be required.")),(0,s.kt)("h3",{id:"json-snapshot"},"JSON Snapshot"),(0,s.kt)("p",null,"This page provides a snapshot of the OpenAPI spec in JSON for where that may be useful."),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("p",{parentName:"admonition"},"This page may be out of date compared to your running instance of BC|OS")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "swagger": "2.0",\n  "info": {\n    "description": "REST API for using BC|OS functionalities.",\n    "title": "BC|OS REST API"\n  },\n  "host": "<rquest-host>",\n  "basePath": "/bcos-rest",\n  "tags": [\n    { "name": "Collections", "description": "Fetching collections." },\n    { "name": "Connector", "description": "Fetch for new job, submit result" },\n    {\n      "name": "Files",\n      "description": "Upload files and use them later in availability queries etc."\n    },\n    { "name": "Results", "description": "Operations on jobs results" },\n    {\n      "name": "Tasks",\n      "description": "Create tasks for rquest_backend, get statuses and results."\n    }\n  ],\n  "paths": {\n    "/api/collections/": {\n      "get": {\n        "tags": ["Collections"],\n        "summary": "List active collections.",\n        "operationId": "getActiveCollectionsUsingGET",\n        "produces": ["application/json"],\n        "responses": {\n          "200": {\n            "description": "OK",\n            "schema": {\n              "type": "array",\n              "items": { "$ref": "#/definitions/GetCollectionResponse" }\n            }\n          },\n          "401": { "description": "Unauthorized" },\n          "403": { "description": "Forbidden" },\n          "404": { "description": "Not Found" }\n        },\n        "deprecated": false\n      }\n    },\n    "/api/file/": {\n      "post": {\n        "tags": ["Files"],\n        "summary": "Upload a file. Note that if a file with the same name exists it gets overridden.",\n        "operationId": "saveFileUsingPOST",\n        "consumes": ["multipart/form-data"],\n        "produces": ["application/json"],\n        "parameters": [\n          {\n            "name": "file",\n            "in": "formData",\n            "description": "file",\n            "required": true,\n            "type": "file"\n          }\n        ],\n        "responses": {\n          "200": {\n            "description": "OK",\n            "schema": { "$ref": "#/definitions/FileSaveResponse" }\n          },\n          "201": { "description": "Created" },\n          "401": { "description": "Unauthorized" },\n          "403": { "description": "Forbidden" },\n          "404": { "description": "Not Found" }\n        },\n        "deprecated": false\n      }\n    },\n    "/api/file/test": {\n      "get": {\n        "tags": ["Files"],\n        "summary": "test",\n        "operationId": "testUsingGET_1",\n        "produces": ["*/*"],\n        "responses": {\n          "200": { "description": "OK", "schema": { "type": "string" } },\n          "401": { "description": "Unauthorized" },\n          "403": { "description": "Forbidden" },\n          "404": { "description": "Not Found" }\n        },\n        "deprecated": false\n      }\n    },\n    "/api/result/version": {\n      "get": {\n        "tags": ["Results"],\n        "summary": "test",\n        "operationId": "testUsingGET_3",\n        "produces": ["*/*"],\n        "responses": {\n          "200": { "description": "OK", "schema": { "type": "string" } },\n          "401": { "description": "Unauthorized" },\n          "403": { "description": "Forbidden" },\n          "404": { "description": "Not Found" }\n        },\n        "deprecated": false\n      }\n    },\n    "/api/task/": {\n      "post": {\n        "tags": ["Tasks"],\n        "summary": "Create a new job.",\n        "operationId": "submitJobUsingPOST",\n        "consumes": ["application/json"],\n        "produces": ["*/*", "application/json"],\n        "parameters": [\n          {\n            "in": "body",\n            "name": "jobParameters",\n            "description": "jobParameters",\n            "required": true,\n            "schema": { "$ref": "#/definitions/JobParameters" }\n          }\n        ],\n        "responses": {\n          "200": {\n            "description": "Success",\n            "schema": { "$ref": "#/definitions/JobId" }\n          },\n          "201": { "description": "Created" },\n          "401": { "description": "Unauthorized" },\n          "403": { "description": "Forbidden" },\n          "404": { "description": "Not Found" }\n        },\n        "deprecated": false\n      }\n    },\n    "/api/task/nextjob/{collectionId}": {\n      "get": {\n        "tags": ["Tasks"],\n        "summary": "Get next job.",\n        "operationId": "getNextJobUsingGET",\n        "produces": ["*/*", "application/octet-stream"],\n        "parameters": [\n          {\n            "name": "collectionId",\n            "in": "path",\n            "description": "collectionId",\n            "required": true,\n            "type": "string"\n          }\n        ],\n        "responses": {\n          "200": {\n            "description": "Success",\n            "schema": { "$ref": "#/definitions/ResponseEntity" }\n          },\n          "401": { "description": "Unauthorized" },\n          "403": { "description": "Forbidden" },\n          "404": { "description": "Not Found" }\n        },\n        "deprecated": false\n      }\n    },\n    "/api/task/queuestatus": {\n      "post": {\n        "tags": ["Tasks"],\n        "summary": "Update LINK queue status",\n        "operationId": "updateQueueStatusUsingPOST",\n        "consumes": ["application/json"],\n        "produces": ["*/*"],\n        "parameters": [\n          {\n            "in": "body",\n            "name": "status",\n            "description": "status",\n            "required": true,\n            "schema": { "type": "string" }\n          }\n        ],\n        "responses": {\n          "200": { "description": "OK", "schema": { "type": "string" } },\n          "201": { "description": "Created" },\n          "401": { "description": "Unauthorized" },\n          "403": { "description": "Forbidden" },\n          "404": { "description": "Not Found" }\n        },\n        "deprecated": false\n      }\n    },\n    "/api/task/result/{uuid}/{collectionid}": {\n      "post": {\n        "tags": ["Tasks"],\n        "summary": "Save job result",\n        "operationId": "saveResultFileUsingPOST",\n        "consumes": ["application/json"],\n        "produces": ["*/*"],\n        "parameters": [\n          {\n            "name": "collectionid",\n            "in": "path",\n            "description": "collectionid",\n            "required": true,\n            "type": "string"\n          },\n          {\n            "in": "body",\n            "name": "result",\n            "description": "result",\n            "required": true,\n            "schema": { "$ref": "#/definitions/Result" }\n          },\n          {\n            "name": "uuid",\n            "in": "path",\n            "description": "uuid",\n            "required": true,\n            "type": "string"\n          }\n        ],\n        "responses": {\n          "200": { "description": "OK", "schema": { "type": "string" } },\n          "201": { "description": "Created" },\n          "401": { "description": "Unauthorized" },\n          "403": { "description": "Forbidden" },\n          "404": { "description": "Not Found" }\n        },\n        "deprecated": false\n      }\n    },\n    "/api/task/resultfile/{uuid}/{collectionId}": {\n      "post": {\n        "tags": ["Tasks"],\n        "summary": "Add job result file",\n        "operationId": "addResultFileUsingPOST",\n        "consumes": ["multipart/form-data"],\n        "produces": ["*/*"],\n        "parameters": [\n          {\n            "name": "collectionId",\n            "in": "path",\n            "description": "collectionId",\n            "required": true,\n            "type": "string"\n          },\n          {\n            "name": "file",\n            "in": "formData",\n            "description": "file",\n            "required": true,\n            "type": "file"\n          },\n          {\n            "name": "sensitive",\n            "in": "query",\n            "description": "sensitive",\n            "required": true,\n            "type": "boolean"\n          },\n          {\n            "name": "uuid",\n            "in": "path",\n            "description": "uuid",\n            "required": true,\n            "type": "string"\n          }\n        ],\n        "responses": {\n          "200": { "description": "OK", "schema": { "type": "string" } },\n          "201": { "description": "Created" },\n          "401": { "description": "Unauthorized" },\n          "403": { "description": "Forbidden" },\n          "404": { "description": "Not Found" }\n        },\n        "deprecated": false\n      }\n    },\n    "/api/task/results/{uuid}/{collectionId}": {\n      "get": {\n        "tags": ["Tasks"],\n        "summary": "Get job result.",\n        "operationId": "getJobResultUsingGET",\n        "produces": ["*/*", "application/json"],\n        "parameters": [\n          {\n            "name": "collectionId",\n            "in": "path",\n            "description": "collectionId",\n            "required": true,\n            "type": "string"\n          },\n          {\n            "name": "uuid",\n            "in": "path",\n            "description": "uuid",\n            "required": true,\n            "type": "string"\n          }\n        ],\n        "responses": {\n          "200": {\n            "description": "OK",\n            "schema": { "$ref": "#/definitions/Result" }\n          },\n          "401": { "description": "Unauthorized" },\n          "403": { "description": "Forbidden" },\n          "404": { "description": "Not Found" }\n        },\n        "deprecated": false\n      }\n    },\n    "/api/task/status/{uuid}": {\n      "get": {\n        "tags": ["Tasks"],\n        "summary": "Get job info.",\n        "operationId": "getJobStatusInfo1UsingGET",\n        "produces": ["*/*", "application/json"],\n        "parameters": [\n          {\n            "name": "uuid",\n            "in": "path",\n            "description": "uuid",\n            "required": true,\n            "type": "string"\n          }\n        ],\n        "responses": {\n          "200": {\n            "description": "OK",\n            "schema": {\n              "type": "array",\n              "items": { "$ref": "#/definitions/Pair\xabstring,string\xbb" }\n            }\n          },\n          "401": { "description": "Unauthorized" },\n          "403": { "description": "Forbidden" },\n          "404": { "description": "Not Found" }\n        },\n        "deprecated": false\n      }\n    },\n    "/api/task/status/{uuid}/{collectionId}": {\n      "get": {\n        "tags": ["Tasks"],\n        "summary": "Get job info.",\n        "operationId": "getJobStatusInfo2UsingGET",\n        "produces": ["*/*", "application/json"],\n        "parameters": [\n          {\n            "name": "collectionId",\n            "in": "path",\n            "description": "collectionId",\n            "required": true,\n            "type": "string"\n          },\n          {\n            "name": "uuid",\n            "in": "path",\n            "description": "uuid",\n            "required": true,\n            "type": "string"\n          }\n        ],\n        "responses": {\n          "200": {\n            "description": "OK",\n            "schema": {\n              "type": "array",\n              "items": { "$ref": "#/definitions/Pair\xabstring,string\xbb" }\n            }\n          },\n          "401": { "description": "Unauthorized" },\n          "403": { "description": "Forbidden" },\n          "404": { "description": "Not Found" }\n        },\n        "deprecated": false\n      }\n    },\n    "/api/task/version": {\n      "get": {\n        "tags": ["Tasks"],\n        "summary": "test",\n        "operationId": "testUsingGET_2",\n        "produces": ["*/*"],\n        "responses": {\n          "200": { "description": "OK", "schema": { "type": "string" } },\n          "401": { "description": "Unauthorized" },\n          "403": { "description": "Forbidden" },\n          "404": { "description": "Not Found" }\n        },\n        "deprecated": false\n      }\n    },\n    "/api/task/{uuid}/{collectionId}": {\n      "delete": {\n        "tags": ["Tasks"],\n        "summary": "Cancel a job.",\n        "operationId": "cancelJobUsingDELETE",\n        "produces": ["*/*"],\n        "parameters": [\n          {\n            "name": "collectionId",\n            "in": "path",\n            "description": "collectionId",\n            "required": true,\n            "type": "string"\n          },\n          {\n            "name": "uuid",\n            "in": "path",\n            "description": "uuid",\n            "required": true,\n            "type": "string"\n          }\n        ],\n        "responses": {\n          "200": { "description": "OK", "schema": { "type": "string" } },\n          "204": { "description": "No Content" },\n          "401": { "description": "Unauthorized" },\n          "403": { "description": "Forbidden" }\n        },\n        "deprecated": false\n      }\n    },\n    "/task/capi/cancel": {\n      "post": {\n        "tags": ["Connector"],\n        "summary": "Get queue information",\n        "operationId": "cancelJobUsingPOST",\n        "consumes": ["application/json"],\n        "produces": ["*/*", "application/json"],\n        "parameters": [\n          {\n            "in": "body",\n            "name": "collection",\n            "description": "collection",\n            "required": true,\n            "schema": { "$ref": "#/definitions/Collection" }\n          }\n        ],\n        "responses": {\n          "200": {\n            "description": "Success",\n            "schema": { "$ref": "#/definitions/JsonNode" }\n          },\n          "201": { "description": "Created" },\n          "401": { "description": "Unauthorized" },\n          "403": { "description": "Forbidden" },\n          "404": { "description": "Not Found" }\n        },\n        "deprecated": false\n      }\n    },\n    "/task/capi/query": {\n      "post": {\n        "tags": ["Connector"],\n        "summary": "Fetch new job.",\n        "operationId": "fetchNextJobUsingPOST",\n        "consumes": ["application/json"],\n        "produces": ["*/*", "application/json"],\n        "parameters": [\n          {\n            "in": "body",\n            "name": "collection",\n            "description": "collection",\n            "required": true,\n            "schema": { "$ref": "#/definitions/Collection" }\n          }\n        ],\n        "responses": {\n          "200": {\n            "description": "Success",\n            "schema": { "$ref": "#/definitions/JsonNode" }\n          },\n          "201": { "description": "Created" },\n          "401": { "description": "Unauthorized" },\n          "403": { "description": "Forbidden" },\n          "404": { "description": "Not Found" }\n        },\n        "deprecated": false\n      }\n    },\n    "/task/capi/queue": {\n      "post": {\n        "tags": ["Connector"],\n        "summary": "Get queue information",\n        "operationId": "getQueueInfoUsingPOST",\n        "consumes": ["application/json"],\n        "produces": ["*/*", "application/json"],\n        "parameters": [\n          {\n            "in": "body",\n            "name": "collection",\n            "description": "collection",\n            "required": true,\n            "schema": { "$ref": "#/definitions/Collection" }\n          }\n        ],\n        "responses": {\n          "200": {\n            "description": "Success",\n            "schema": { "$ref": "#/definitions/JsonNode" }\n          },\n          "201": { "description": "Created" },\n          "401": { "description": "Unauthorized" },\n          "403": { "description": "Forbidden" },\n          "404": { "description": "Not Found" }\n        },\n        "deprecated": false\n      }\n    },\n    "/task/capi/result": {\n      "post": {\n        "tags": ["Connector"],\n        "summary": "Submit job result",\n        "operationId": "submitJobResultUsingPOST",\n        "consumes": ["application/json"],\n        "produces": ["*/*", "application/json"],\n        "parameters": [\n          {\n            "in": "body",\n            "name": "collection",\n            "description": "collection",\n            "required": true,\n            "schema": { "$ref": "#/definitions/Collection" }\n          }\n        ],\n        "responses": {\n          "200": {\n            "description": "Success",\n            "schema": { "$ref": "#/definitions/JsonNode" }\n          },\n          "201": { "description": "Created" },\n          "401": { "description": "Unauthorized" },\n          "403": { "description": "Forbidden" },\n          "404": { "description": "Not Found" }\n        },\n        "deprecated": false\n      }\n    },\n    "/task/capi/version": {\n      "get": {\n        "tags": ["Connector"],\n        "summary": "test",\n        "operationId": "testUsingGET",\n        "produces": ["*/*"],\n        "responses": {\n          "200": { "description": "OK", "schema": { "type": "string" } },\n          "401": { "description": "Unauthorized" },\n          "403": { "description": "Forbidden" },\n          "404": { "description": "Not Found" }\n        },\n        "deprecated": false\n      }\n    }\n  },\n  "definitions": {\n    "Collection": {\n      "type": "object",\n      "properties": { "collection-id": { "type": "string" } },\n      "title": "Collection"\n    },\n    "FileSaveResponse": {\n      "type": "object",\n      "properties": {\n        "filename": { "type": "string" },\n        "message": { "type": "string" },\n        "timestamp": { "$ref": "#/definitions/Timestamp" }\n      },\n      "title": "FileSaveResponse"\n    },\n    "GetCollectionResponse": {\n      "type": "object",\n      "properties": {\n        "externalId": { "type": "string" },\n        "name": { "type": "string" },\n        "protocol": { "type": "string", "enum": ["TCP_TUNNEL", "BCOS_REST"] },\n        "rquestId": { "type": "string" }\n      },\n      "title": "GetCollectionResponse"\n    },\n    "JobId": {\n      "type": "object",\n      "properties": {\n        "job-id": { "type": "string" },\n        "job-uuid": { "type": "string" },\n        "message": { "type": "string" }\n      },\n      "title": "JobId"\n    },\n    "JobParameters": {\n      "type": "object",\n      "required": ["application", "input"],\n      "properties": {\n        "application": { "type": "string", "example": "AVAILABILITY_QUERY" },\n        "input": {\n          "example": "\\"input \\": {  \\"collections \\": [ \\"FI_DEMOCOL1 \\"]}",\n          "$ref": "#/definitions/JsonNode"\n        }\n      },\n      "title": "JobParameters",\n      "description": "Job parameters"\n    },\n    "JsonNode": { "type": "object", "title": "JsonNode" },\n    "Pair\xabstring,string\xbb": {\n      "type": "object",\n      "properties": {\n        "key": { "type": "string" },\n        "left": { "type": "string" },\n        "right": { "type": "string" },\n        "value": { "type": "string" }\n      },\n      "title": "Pair\xabstring,string\xbb"\n    },\n    "QueryResult": {\n      "type": "object",\n      "properties": {\n        "count": { "type": "integer", "format": "int64" },\n        "files": {\n          "type": "array",\n          "items": { "$ref": "#/definitions/ResultFile" }\n        }\n      },\n      "title": "QueryResult"\n    },\n    "ResponseEntity": {\n      "type": "object",\n      "properties": {\n        "body": { "type": "object" },\n        "statusCode": {\n          "type": "string",\n          "enum": [\n            "100 CONTINUE",\n            "101 SWITCHING_PROTOCOLS",\n            "102 PROCESSING",\n            "103 CHECKPOINT",\n            "200 OK",\n            "201 CREATED",\n            "202 ACCEPTED",\n            "203 NON_AUTHORITATIVE_INFORMATION",\n            "204 NO_CONTENT",\n            "205 RESET_CONTENT",\n            "206 PARTIAL_CONTENT",\n            "207 MULTI_STATUS",\n            "208 ALREADY_REPORTED",\n            "226 IM_USED",\n            "300 MULTIPLE_CHOICES",\n            "301 MOVED_PERMANENTLY",\n            "302 FOUND",\n            "302 MOVED_TEMPORARILY",\n            "303 SEE_OTHER",\n            "304 NOT_MODIFIED",\n            "305 USE_PROXY",\n            "307 TEMPORARY_REDIRECT",\n            "308 PERMANENT_REDIRECT",\n            "400 BAD_REQUEST",\n            "401 UNAUTHORIZED",\n            "402 PAYMENT_REQUIRED",\n            "403 FORBIDDEN",\n            "404 NOT_FOUND",\n            "405 METHOD_NOT_ALLOWED",\n            "406 NOT_ACCEPTABLE",\n            "407 PROXY_AUTHENTICATION_REQUIRED",\n            "408 REQUEST_TIMEOUT",\n            "409 CONFLICT",\n            "410 GONE",\n            "411 LENGTH_REQUIRED",\n            "412 PRECONDITION_FAILED",\n            "413 PAYLOAD_TOO_LARGE",\n            "413 REQUEST_ENTITY_TOO_LARGE",\n            "414 URI_TOO_LONG",\n            "414 REQUEST_URI_TOO_LONG",\n            "415 UNSUPPORTED_MEDIA_TYPE",\n            "416 REQUESTED_RANGE_NOT_SATISFIABLE",\n            "417 EXPECTATION_FAILED",\n            "418 I_AM_A_TEAPOT",\n            "419 INSUFFICIENT_SPACE_ON_RESOURCE",\n            "420 METHOD_FAILURE",\n            "421 DESTINATION_LOCKED",\n            "422 UNPROCESSABLE_ENTITY",\n            "423 LOCKED",\n            "424 FAILED_DEPENDENCY",\n            "425 TOO_EARLY",\n            "426 UPGRADE_REQUIRED",\n            "428 PRECONDITION_REQUIRED",\n            "429 TOO_MANY_REQUESTS",\n            "431 REQUEST_HEADER_FIELDS_TOO_LARGE",\n            "451 UNAVAILABLE_FOR_LEGAL_REASONS",\n            "500 INTERNAL_SERVER_ERROR",\n            "501 NOT_IMPLEMENTED",\n            "502 BAD_GATEWAY",\n            "503 SERVICE_UNAVAILABLE",\n            "504 GATEWAY_TIMEOUT",\n            "505 HTTP_VERSION_NOT_SUPPORTED",\n            "506 VARIANT_ALSO_NEGOTIATES",\n            "507 INSUFFICIENT_STORAGE",\n            "508 LOOP_DETECTED",\n            "509 BANDWIDTH_LIMIT_EXCEEDED",\n            "510 NOT_EXTENDED",\n            "511 NETWORK_AUTHENTICATION_REQUIRED"\n          ]\n        },\n        "statusCodeValue": { "type": "integer", "format": "int32" }\n      },\n      "title": "ResponseEntity"\n    },\n    "Result": {\n      "type": "object",\n      "properties": {\n        "collection_id": { "type": "string" },\n        "protocolVersion": { "type": "string" },\n        "queryResult": { "$ref": "#/definitions/QueryResult" },\n        "status": { "type": "string" },\n        "uuid": { "type": "string" }\n      },\n      "title": "Result"\n    },\n    "ResultFile": {\n      "type": "object",\n      "properties": {\n        "file_data": { "type": "string" },\n        "file_description": { "type": "string" },\n        "file_name": { "type": "string" },\n        "file_reference": { "type": "string" },\n        "file_sensitive": { "type": "boolean" },\n        "file_size": { "type": "number", "format": "double" },\n        "file_type": { "type": "string", "enum": ["BCOS"] }\n      },\n      "title": "ResultFile"\n    },\n    "Timestamp": {\n      "type": "object",\n      "properties": {\n        "date": { "type": "integer", "format": "int32" },\n        "day": { "type": "integer", "format": "int32" },\n        "hours": { "type": "integer", "format": "int32" },\n        "minutes": { "type": "integer", "format": "int32" },\n        "month": { "type": "integer", "format": "int32" },\n        "nanos": { "type": "integer", "format": "int32" },\n        "seconds": { "type": "integer", "format": "int32" },\n        "time": { "type": "integer", "format": "int64" },\n        "timezoneOffset": { "type": "integer", "format": "int32" },\n        "year": { "type": "integer", "format": "int32" }\n      },\n      "title": "Timestamp"\n    }\n  }\n}\n')))}u.isMDXComponent=!0}}]);