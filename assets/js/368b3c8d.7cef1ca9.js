"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4909],{8570:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(79);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),g=a,m=d["".concat(i,".").concat(g)]||d[g]||c[g]||o;return n?r.createElement(m,s(s({ref:t},u),{},{components:n})):r.createElement(m,s({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6056:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(2203),a=(n(79),n(8570));const o={sidebar_position:1},s="Using Nexus",l={unversionedId:"devs/external-systems/nexus/using_nexus",id:"devs/external-systems/nexus/using_nexus",title:"Using Nexus",description:"Installation",source:"@site/docs/devs/external-systems/nexus/using_nexus.md",sourceDirName:"devs/external-systems/nexus",slug:"/devs/external-systems/nexus/using_nexus",permalink:"/hutch/docs/devs/external-systems/nexus/using_nexus",draft:!1,editUrl:"https://github.com/hdruk/hutch/tree/main/website/docs/devs/external-systems/nexus/using_nexus.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"devGuide",previous:{title:"Nexus",permalink:"/hutch/docs/devs/external-systems/nexus/"},next:{title:"WfExS",permalink:"/hutch/docs/devs/external-systems/wfexs/"}},i={},p=[{value:"Installation",id:"installation",level:2},{value:"Running Nexus",id:"running-nexus",level:2},{value:"Getting the admin password",id:"getting-the-admin-password",level:2},{value:"Making a hosted Docker registry",id:"making-a-hosted-docker-registry",level:2},{value:"Pushing and pulling the Docker registry",id:"pushing-and-pulling-the-docker-registry",level:2},{value:"Pushing",id:"pushing",level:3},{value:"Pulling",id:"pulling",level:3}],u={toc:p};function c(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"using-nexus"},"Using Nexus"),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"The easiest way to install nexus is by using Docker."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull sonatype/nexus3\n")),(0,a.kt)("p",null,"Information about the image as well as other versions are available ",(0,a.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/sonatype/nexus3/"},"here"),"."),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"Nexus only has ",(0,a.kt)("inlineCode",{parentName:"p"},"amd64"),"-based images, so performance may vary depending on your machine's processor.")),(0,a.kt)("h2",{id:"running-nexus"},"Running Nexus"),(0,a.kt)("p",null,"When running Nexus in Docker, you expose a port and map it to port ",(0,a.kt)("inlineCode",{parentName:"p"},"8081")," inside the container. This will let you view the web console at ",(0,a.kt)("inlineCode",{parentName:"p"},"localhost:8081")," in the browser."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'# map port 8081 on host to 8081 on the container\ndocker run -p "8081:8081" sonatype/nexus3\n\n# ## OR ##\n\n# map port 1234 on host to 8081 on the container\ndocker run -p "1234:8081" sonatype/nexus3\n')),(0,a.kt)("p",null,"You will also need to expose additional ports for your repository services as well. Suppose you want to add a docker registry to your Nexus, you could map port ",(0,a.kt)("inlineCode",{parentName:"p"},"8082"),". Additionally you could map ",(0,a.kt)("inlineCode",{parentName:"p"},"8083")," for a git repo on your Nexus."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'docker run -p "8081:8081" -p "8082:8082" -p "8083:8083" sonatype/nexus3\n')),(0,a.kt)("p",null,"If you use ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose"),", a Nexus service might look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'nexus:\n  image: sonatype/nexus3\n  restart: always\n  ports:\n    - "8081:8081" # web portal port\n    - "8082:8082" # port for the docker registry\n    - "8083:8083" # port for the git system\n')),(0,a.kt)("h2",{id:"getting-the-admin-password"},"Getting the admin password"),(0,a.kt)("p",null,"The admin password can be obtained by running the following command in the terminal."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"docker exec nexus cat /nexus-data/admin.password \n")),(0,a.kt)("h2",{id:"making-a-hosted-docker-registry"},"Making a hosted Docker registry"),(0,a.kt)("p",null,"Navigate to the web portal in the web browaser (",(0,a.kt)("inlineCode",{parentName:"p"},"localhost:8081"),", or the port you mapped the portal to on the host) and sign in."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The first time you attempt to login, it will give you the username and tell you to find the admin password (see above). Once logged in you will be promtped to provide a new password for the admin user.")),(0,a.kt)("p",null,'Go to the server administration tab and select "Repositories" under "Repository".'),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(6131).Z,width:"928",height:"548"})),(0,a.kt)("p",null,'Click "Create repository" and the select "Docker (hosted)" from the list.'),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(1068).Z,width:"1392",height:"760"})),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(5220).Z,width:"1412",height:"1116"})),(0,a.kt)("p",null,"Give the repository a name and allocate one of the additional ports you specified when running the container. You can either do HTTP (not recommended for production), and/or HTTPS. You will need a separate port for each."),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(2632).Z,width:"1776",height:"966"})),(0,a.kt)("h2",{id:"pushing-and-pulling-the-docker-registry"},"Pushing and pulling the Docker registry"),(0,a.kt)("h3",{id:"pushing"},"Pushing"),(0,a.kt)("p",null,"First, login to the resgistry."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"docker login localhost:8081\n")),(0,a.kt)("p",null,"Give the user name and password for account on Nexus, such as the admin account, when asked."),(0,a.kt)("p",null,"Tag your image with the path to the registry."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"docker tag <my image> localhost:8081/<my image>:<some tag>\n")),(0,a.kt)("p",null,"Then push the new tag."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"docker push localhost:8081/<my image>:<some tag>\n")),(0,a.kt)("h3",{id:"pulling"},"Pulling"),(0,a.kt)("p",null,"First, login to the resgistry."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"docker login localhost:8081\n")),(0,a.kt)("p",null,"Then pull the new tag."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull localhost:8081/<my image>:<some tag>\n")))}c.isMDXComponent=!0},1068:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/create-repo-733187ceebdc4b2d9e917455366826c9.png"},6131:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/find-repos-4e48e76bcfbcaa076f1c589542a7ae0c.png"},5220:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/repo-kind-d977991c1e6656cd4c3facc1bb0a90da.png"},2632:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/setup-repo-4935aeeacf4f5398c15098917c1cb430.png"}}]);