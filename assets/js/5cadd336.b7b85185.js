"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8722],{8570:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(79);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),s=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,g=d["".concat(u,".").concat(m)]||d[m]||c[m]||i;return n?a.createElement(g,l(l({ref:t},p),{},{components:n})):a.createElement(g,l({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4670:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=n(2203),r=(n(79),n(8570));const i={sidebar_position:2},l="Hutch Agent",o={unversionedId:"users/getting-started/configuration/agent",id:"users/getting-started/configuration/agent",title:"Hutch Agent",description:"The agent is configured by environment variables; for development it will load a .env file local to pyproject.toml.",source:"@site/docs/users/getting-started/configuration/agent.md",sourceDirName:"users/getting-started/configuration",slug:"/users/getting-started/configuration/agent",permalink:"/hutch/docs/users/getting-started/configuration/agent",draft:!1,editUrl:"https://github.com/hdruk/hutch/tree/main/website/docs/users/getting-started/configuration/agent.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"userGuide",previous:{title:"Hutch Manager",permalink:"/hutch/docs/users/getting-started/configuration/manager"},next:{title:"Detailed Overview",permalink:"/hutch/docs/category/detailed-overview"}},u={},s=[{value:"Available values and defaults",id:"available-values-and-defaults",level:2},{value:"Currently supported SQLAlchemy drivers",id:"currently-supported-sqlalchemy-drivers",level:3},{value:"Example Production Configuration guidance",id:"example-production-configuration-guidance",level:2}],p={toc:s};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"hutch-agent"},"Hutch Agent"),(0,r.kt)("p",null,"The agent is configured by environment variables; for development it will load a ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," file local to ",(0,r.kt)("inlineCode",{parentName:"p"},"pyproject.toml"),"."),(0,r.kt)("h2",{id:"available-values-and-defaults"},"Available values and defaults"),(0,r.kt)("p",null,"Example .env for development (also documents unnecessary/default values)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'# Logging Database configuration\n\n# LOG_DB_DRIVERNAME="postgresql" # SQLAlchemy driver names (including short names). See currently supported list.\nLOG_DB_HOST="localhost"\n# LOG_DB_PORT=<driver default> # will use the default port of the database driver\nLOG_DB_DATABASE="postgres"\nLOG_DB_USERNAME="postgres"\nLOG_DB_PASSWORD="example"\n\n\n# Data source configuration\n\nDATASOURCE_NAME="jobs"\n# DATASOURCE_DB_DRIVERNAME="postgresql"\nDATASOURCE_DB_HOST=""\n# DATASOURCE_DB_PORT=<driver default> # will use the default port of the database driver\nDATASOURCE_DB_DATABASE=""\nDATASOURCE_DB_USERNAME=""\nDATASOURCE_DB_PASSWORD=""\n# DATASOURCE_DB_SCHEMA=<driver default> # will use the default schema of the database driver (e.g. `public` for postgres, `dbo` for MSSQL...)\n\n\n# Manager related configuration\n\nMANAGER_URL="https://localhost:45588"\nMANAGER_VERIFY_SSL=0 # Disable SSL verification ONLY IN DEVELOPMENT to allow for self-signed certs. Actual in-app default is 1.\n\n# Check In schedule\n\n# CHECKIN_CRON="0 */1 * * *" # once every hour\n')),(0,r.kt)("h3",{id:"currently-supported-sqlalchemy-drivers"},"Currently supported SQLAlchemy drivers"),(0,r.kt)("p",null,"We currently only depend on ",(0,r.kt)("inlineCode",{parentName:"p"},"psycopg2")," so that's the only supported driver at this time."),(0,r.kt)("p",null,"Valid values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"postgresql")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"postgresql+psycopg2"))),(0,r.kt)("h2",{id:"example-production-configuration-guidance"},"Example Production Configuration guidance"),(0,r.kt)("p",null,"Set up the logging DB:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"LOG_DB_HOST=<host>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"LOG_DB_DATABASE=<db name>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"LOG_DB_USERNAME=<username>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"LOG_DB_PASSWORD=<password>"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Generate a good random one!")))),(0,r.kt)("li",{parentName:"ul"},"These settings may be different to the ones in ",(0,r.kt)("a",{parentName:"li",href:"#database"},"Database"))),(0,r.kt)("p",null,"Set up the data source configuration:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DATASOURCE_NAME=<name>"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"this will also be the name of the queue on the message queue server for the data source"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DATASOURCE_DB_HOST=<host>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DATASOURCE_DB_DATABASE=<db>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DATASOURCE_DB_USERNAME=<username>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DATASOURCE_DB_PASSWORD=<password>")),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"DATASOURCE_DB_")," settings may be different to the ones in ",(0,r.kt)("a",{parentName:"li",href:"#database"},"Database"))),(0,r.kt)("p",null,"Set up with manager connection:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"MANAGER_URL=<url to manager>"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"https://<host>[:port]")," NB: if using docker-compose, ",(0,r.kt)("inlineCode",{parentName:"li"},"host")," is the service name")))),(0,r.kt)("p",null,"Set up the message queue connection:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"MSG_QUEUE_HOST=<host>"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the host of the rabbitmq server. If using docker-compose, use the queue service name. Needs to match ",(0,r.kt)("inlineCode",{parentName:"li"},"ASPNETCORE_JobQueue__HostName")," above.")))))}c.isMDXComponent=!0}}]);