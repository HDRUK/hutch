"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4170],{8570:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(79);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,g=d["".concat(l,".").concat(m)]||d[m]||c[m]||a;return n?r.createElement(g,i(i({ref:t},u),{},{components:n})):r.createElement(g,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8536:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(2203),o=(n(79),n(8570));const a={sidebar_position:4},i="Docker Images in a TRE",s={unversionedId:"users/getting-started/configuration/docker-hub-spoof",id:"users/getting-started/configuration/docker-hub-spoof",title:"Docker Images in a TRE",description:"This page assumes you are using Ubuntu Linux as your OS and that you will have root or sudo privileges.",source:"@site/docs/users/getting-started/configuration/docker-hub-spoof.md",sourceDirName:"users/getting-started/configuration",slug:"/users/getting-started/configuration/docker-hub-spoof",permalink:"/hutch/docs/users/getting-started/configuration/docker-hub-spoof",draft:!1,editUrl:"https://github.com/hdruk/hutch/tree/main/website/docs/users/getting-started/configuration/docker-hub-spoof.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"userGuide",previous:{title:"WorkflowHub in a TRE",permalink:"/hutch/docs/users/getting-started/configuration/workflowhub-spoof"}},l={},p=[{value:"Use <code>podman</code> as an alternative",id:"use-podman-as-an-alternative",level:2},{value:"Example <code>podman</code> configuration file",id:"example-podman-configuration-file",level:3}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"docker-images-in-a-tre"},"Docker Images in a TRE"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"This page assumes you are using Ubuntu Linux as your OS and that you will have ",(0,o.kt)("inlineCode",{parentName:"p"},"root")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"sudo")," privileges.")),(0,o.kt)("p",null,"Inside a Trusted Research Environment (TRE) there will be no internet access. This means that images cannot be pulled from Docker Hub or any other remote container registry."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"The Docker client cannot be made to point to a custom registry by default"),". This means operations like ",(0,o.kt)("inlineCode",{parentName:"p"},"docker pull postgres")," will always try to get ",(0,o.kt)("inlineCode",{parentName:"p"},"postgres"),", for example, from Docker Hub. To get ",(0,o.kt)("inlineCode",{parentName:"p"},"postgres")," from a custom registry, you need to do ",(0,o.kt)("inlineCode",{parentName:"p"},"docker pull my_custom_registry/postgres"),". Many workflows use Docker images from various registries and it would be time-consuming to manually alter them. Furthermore, doing it programmatically would be impractical."),(0,o.kt)("h2",{id:"use-podman-as-an-alternative"},"Use ",(0,o.kt)("inlineCode",{parentName:"h2"},"podman")," as an alternative"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://podman.io/"},(0,o.kt)("inlineCode",{parentName:"a"},"podman"))," is a free and open-source container runtime. It works like a drop-in replacement for Docker and can pull images from all the same places as Docker. Crucially, it can be configured to allow unqualified image names to your air-gapped container registry."),(0,o.kt)("p",null,"Instructions to install ",(0,o.kt)("inlineCode",{parentName:"p"},"podman")," can be found ",(0,o.kt)("a",{parentName:"p",href:"https://podman.io/docs/installation"},"here")),(0,o.kt)("h3",{id:"example-podman-configuration-file"},"Example ",(0,o.kt)("inlineCode",{parentName:"h3"},"podman")," configuration file"),(0,o.kt)("p",null,"The following example shows how to point ",(0,o.kt)("inlineCode",{parentName:"p"},"podman")," to an insecure (non-HTTPS) registry on your local machine. It assumes the registry is running on port ",(0,o.kt)("inlineCode",{parentName:"p"},"8082"),"."),(0,o.kt)("p",null,"In either ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/containers/registries.conf")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"$HOME/.config/containers/registries.conf"),", add the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-toml"},"unqualified-search-registries = ['localhost:8082']\n\n[[registry]]\nlocation = \"localhost:8082\"\ninsecure = true\n")),(0,o.kt)("p",null,"In this example, if you do ",(0,o.kt)("inlineCode",{parentName:"p"},"podman pull postgres")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"postgres")," exists in your registry at ",(0,o.kt)("inlineCode",{parentName:"p"},"localhost:8082"),", the image will be pulled. ",(0,o.kt)("inlineCode",{parentName:"p"},"podman")," will ",(0,o.kt)("strong",{parentName:"p"},"not")," fall back on Docker Hub."))}c.isMDXComponent=!0}}]);