"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[95],{8570:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var o=n(79);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||i;return n?o.createElement(h,l(l({ref:t},u),{},{components:n})):o.createElement(h,l({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:r,l[1]=a;for(var p=2;p<i;p++)l[p]=n[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9876:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>a,toc:()=>p});var o=n(2203),r=(n(79),n(8570));const i={sidebar_position:4},l="TRE-FX Deployment Notes",a={unversionedId:"tre-fx/deployment-notes",id:"tre-fx/deployment-notes",title:"TRE-FX Deployment Notes",description:"This section contains notes specific to the deployment of testing/showcase environments for the TRE-FX project.",source:"@site/docs/tre-fx/deployment-notes.md",sourceDirName:"tre-fx",slug:"/tre-fx/deployment-notes",permalink:"/hutch/docs/tre-fx/deployment-notes",draft:!1,editUrl:"https://github.com/hdruk/hutch/tree/main/website/docs/tre-fx/deployment-notes.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docs",previous:{title:"TRE-FX",permalink:"/hutch/docs/category/tre-fx"}},s={},p=[{value:"VMs",id:"vms",level:2},{value:"Common Setup",id:"common-setup",level:3},{value:"SAIL TRE-Agent VM setup",id:"sail-tre-agent-vm-setup",level:3},{value:"BitFount Pod TRE-Agent VM setup",id:"bitfount-pod-tre-agent-vm-setup",level:3},{value:"Hutch VM setup",id:"hutch-vm-setup",level:3}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"tre-fx-deployment-notes"},"TRE-FX Deployment Notes"),(0,r.kt)("p",null,"This section contains notes specific to the deployment of testing/showcase environments for the TRE-FX project."),(0,r.kt)("p",null,"They cover running a TRE-FX TRE Agent and the Hutch Agent in separate VMs, configured to talk to a centrally hosted instance of the TRE-FX Submission Layer."),(0,r.kt)("p",null,"The notes here assume the use of Microsoft Azure Cloud initially."),(0,r.kt)("h2",{id:"vms"},"VMs"),(0,r.kt)("p",null,"All VMs are Ubuntu Server 22.04 LTS on x64."),(0,r.kt)("p",null,"In Azure they have all been provisioned as ",(0,r.kt)("inlineCode",{parentName:"p"},"Standard D4s v3 (4 vcpus, 16 GiB memory)"),"."),(0,r.kt)("p",null,"The first VM was set up to a common point as per the below. Then imaged so it could be cloned and set up separately for Hutch and the TRE Agent specifically."),(0,r.kt)("p",null,"Once a VM pair for both the TRE Agent and Hutch were complete, they were imaged to allow provision of further environments."),(0,r.kt)("h3",{id:"common-setup"},"Common Setup"),(0,r.kt)("p",null,"Step by step as follows:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"ssh with the Azure generated private key"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"sudo apt update")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"sudo apt upgrade -y")),(0,r.kt)("li",{parentName:"ol"},"default selection for outdated daemon service restarts")),(0,r.kt)("p",null,"Initial environment state at this point:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ python3 --version\nPython 3.10.12\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ git --version\ngit version 2.34.1\n")),(0,r.kt)("p",null,"Other Hutch / WfExS dependencies not installed (podman, dotnet, etc...)"),(0,r.kt)("h3",{id:"sail-tre-agent-vm-setup"},"SAIL TRE-Agent VM setup"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"// TODO")),(0,r.kt)("p",null,"The SAIL TRE-Agent stack should all be described in Docker Compose, so we likely only need Docker here, and some network config."),(0,r.kt)("h3",{id:"bitfount-pod-tre-agent-vm-setup"},"BitFount Pod TRE-Agent VM setup"),(0,r.kt)("p",null,"Alternatively, the BitFount Pod can be used in the TRE-Agent role."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"// TODO")),(0,r.kt)("p",null,"It requires Python3 (The ",(0,r.kt)("inlineCode",{parentName:"p"},"3.10")," in the environment should suffice?) and probably nothing else?"),(0,r.kt)("p",null,"Network config TBC."),(0,r.kt)("h3",{id:"hutch-vm-setup"},"Hutch VM setup"),(0,r.kt)("p",null,"Hutch wants the following components, not necessarily in the same VM, but to be accessible:"),(0,r.kt)("p",null,"Same VM:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Hutch itself (depends on dotnet7 with the aspnet core runtime)"),(0,r.kt)("li",{parentName:"ol"},"WfExS (depends on Python3)"),(0,r.kt)("li",{parentName:"ol"},"Podman")),(0,r.kt)("p",null,"There is an Ansible playbook that should work for preparing all of this in the environment."),(0,r.kt)("p",null,"Accessible services:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"RabbitMQ"),(0,r.kt)("li",{parentName:"ol"},"Sonatype Nexus (for storing container images of approved tools, and Workflow RO-Crates of approved workflows)"),(0,r.kt)("li",{parentName:"ol"},"Minio (the instance(s) that the TRE-Agent expects to use for transport between itself and Hutch - for sending job crates to Hutch, inspecting putative outputs from Hutch (i.e. Disclosure Control), and receiving approved outputs from Hutch)"),(0,r.kt)("li",{parentName:"ol"},"Target datastores - in the context of TRE-FX this means a PostgreSQL Database which credentials will be provided for on a per job basis by the TRE-Agent.")),(0,r.kt)("p",null,"All of the above can be run in the same VM with Docker Compose. You can tell compose to stand up specific services if you don't need the whole stack."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"// Q: Should Minio be in the TRE-Agent VM for this setup?")))}c.isMDXComponent=!0}}]);