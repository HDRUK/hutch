"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[417],{8570:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(79);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),f=u(r),m=o,w=f["".concat(s,".").concat(m)]||f[m]||p[m]||a;return r?n.createElement(w,i(i({ref:t},c),{},{components:r})):n.createElement(w,i({ref:t},c))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},9782:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var n=r(2203),o=(r(79),r(8570));const a={sidebar_position:4},i="Running HutchWorker workflow",l={unversionedId:"devs/external-systems/wfexs/running-test-workflow",id:"devs/external-systems/wfexs/running-test-workflow",title:"Running HutchWorker workflow",description:"Rquest Omop Worker Workflows",source:"@site/docs/devs/external-systems/wfexs/running-test-workflow.md",sourceDirName:"devs/external-systems/wfexs",slug:"/devs/external-systems/wfexs/running-test-workflow",permalink:"/hutch/docs/devs/external-systems/wfexs/running-test-workflow",draft:!1,editUrl:"https://github.com/hdruk/hutch/tree/main/website/docs/devs/external-systems/wfexs/running-test-workflow.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"devGuide",previous:{title:"Running WfExS",permalink:"/hutch/docs/devs/external-systems/wfexs/running-wfexs"},next:{title:"ROCrates.Net",permalink:"/hutch/docs/devs/ROCrates.Net/"}},s={},u=[{value:"Rquest Omop Worker Workflows",id:"rquest-omop-worker-workflows",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Set up local DB",id:"set-up-local-db",level:3},{value:"Stage file for executing rquest-omop-worker",id:"stage-file-for-executing-rquest-omop-worker",level:3},{value:"WfExS config file",id:"wfexs-config-file",level:3},{value:"Executing the workflow",id:"executing-the-workflow",level:2}],c={toc:u};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"running-hutchworker-workflow"},"Running HutchWorker workflow"),(0,o.kt)("h2",{id:"rquest-omop-worker-workflows"},"Rquest Omop Worker Workflows"),(0,o.kt)("p",null,"The rquest-omop-worker workflows can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/HDRUK/hutch/tree/main/workflows"},"here"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"sec-hutch.cwl"),": Main workflow linked in ",(0,o.kt)("inlineCode",{parentName:"p"},"workflow_id")," in WfExS stage file.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"sec-hutchx86.cwl"),": Same as above but configured for intel chip")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"rquest-oneshot.cwl"),": CommandLineTool referenced in main workflow.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"rquest-oneshotx86.cwl"),": Same as above but configured for intel chip"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")," WfExS needs the workflows to be nested as of now, with main workflow linking to the CommandLineTool."),(0,o.kt)("h2",{id:"configuration"},"Configuration"),(0,o.kt)("h3",{id:"set-up-local-db"},"Set up local DB"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Create a docker image for a postgres DB - ",(0,o.kt)("a",{parentName:"p",href:"https://hub.docker.com/_/postgres"},"docker postgres image"),". Point the DB volume to the directory with the sample data csv files.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Instructions on setting up the sample data once the DB is created can be found ",(0,o.kt)("a",{parentName:"p",href:"/hutch/docs/users/sample-data/omop-53"},"here"),"."))),(0,o.kt)("h3",{id:"stage-file-for-executing-rquest-omop-worker"},"Stage file for executing rquest-omop-worker"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"workflow_id: # URL to workflow \n#choice of github public url, workflow RO-Crate zip archive, github repo URL\nworkflow_config:\n  container: # choice of 'singularity', 'docker', 'podman' or 'none'\n  secure: false\nnickname: 'hutch-rquest-worker' # prefix for the randomly generated nickname\ncacheDir: /path/to/chacheDir\ncrypt4gh: # four random words here\n  key: /path/to/private-key\n  passphrase: \n  pub: /path/to/public-key\noutputs:\n  output_file:\n    c-l-a-s-s: File\n    glob: \"output.json\" # needs to match workflow output\nparams: # parameters needed to run the workflow\n  body: '{...}' # contains rquest query json\n  is_availability: # true or false \n  # Credentials needed to connect to local DB with sample data.\n  db_host:\n  db_name:\n  db_user:\n  db_password:\n")),(0,o.kt)("h3",{id:"wfexs-config-file"},"WfExS config file"),(0,o.kt)("p",null,"An example of a local configuration files can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/inab/WfExS-backend/tree/main/workflow_examples"},"here"),". More specificaly ",(0,o.kt)("inlineCode",{parentName:"p"},"local_config.yaml")," is used to stage the rquest-omop-worker workflow also found ",(0,o.kt)("a",{parentName:"p",href:"/hutch/docs/devs/external-systems/wfexs/config#local-wfexs-configuration"},"here"),"."),(0,o.kt)("h2",{id:"executing-the-workflow"},"Executing the workflow"),(0,o.kt)("p",null,"Once the DB is set up with the sample data you may execute the workflow using these ",(0,o.kt)("a",{parentName:"p",href:"/hutch/docs/devs/external-systems/wfexs/running-wfexs#running-wfexs"},"steps"),". "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Where ",(0,o.kt)("inlineCode",{parentName:"li"},"<path_to_wfexs_config.yaml>")," use the ",(0,o.kt)("a",{parentName:"li",href:"#wfexs-config-file"},"local config"),"."),(0,o.kt)("li",{parentName:"ul"},"Where ",(0,o.kt)("inlineCode",{parentName:"li"},"<stage_file.yaml>")," use the ",(0,o.kt)("a",{parentName:"li",href:"#stage-file-for-executing-rquest-omop-worker"},"wfExS stage file"),".")))}p.isMDXComponent=!0}}]);