"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[990],{38570:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(70079);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),h=i,k=d["".concat(c,".").concat(h)]||d[h]||p[h]||r;return n?a.createElement(k,o(o({ref:t},u),{},{components:n})):a.createElement(k,o({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},67281:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(52203),i=(n(70079),n(38570));const r={},o="Keycloak",l={unversionedId:"external-systems/keycloak/index",id:"external-systems/keycloak/index",title:"Keycloak",description:"Keycloak is a popular Open ID Connect (OIDC) Identity Provider.",source:"@site/docs/external-systems/keycloak/index.md",sourceDirName:"external-systems/keycloak",slug:"/external-systems/keycloak/",permalink:"/hutch/docs/external-systems/keycloak/",draft:!1,editUrl:"https://github.com/hdruk/hutch/tree/main/website/docs/external-systems/keycloak/index.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"External Systems",permalink:"/hutch/docs/category/external-systems"},next:{title:"MinIO",permalink:"/hutch/docs/external-systems/minio/"}},c={},s=[{value:"Further configuration",id:"further-configuration",level:2},{value:"Create a Realm",id:"create-a-realm",level:3},{value:"Create (a) User(s)",id:"create-a-users",level:3},{value:"Add a password",id:"add-a-password",level:4},{value:"Add required MinIO attributes to user",id:"add-required-minio-attributes-to-user",level:4},{value:"Create a Client for Hutch",id:"create-a-client-for-hutch",level:3},{value:"Add a Client Scope for the Client",id:"add-a-client-scope-for-the-client",level:3},{value:"Configure Hutch",id:"configure-hutch",level:3}],u={toc:s};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"keycloak"},"Keycloak"),(0,i.kt)("p",null,"Keycloak is a popular Open ID Connect (OIDC) Identity Provider."),(0,i.kt)("p",null,"The TRE-FX stack uses OIDC Token auth for:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The Workflow Executor (i.e. Hutch) to communicate with the TRE Controller API"),(0,i.kt)("li",{parentName:"ul"},"The Workflow Executor (i.e. Hutch) to communicate with the Intermediary Store (MinIO)")),(0,i.kt)("p",null,"Hutch can bypass the need for OIDC Token auth when in Standalone mode (i.e. not communicating with a TRE Controller API) and/or if access credentials are passed directly for the Intermediary Store (e.g. at job submission) (or configured in the ",(0,i.kt)("inlineCode",{parentName:"p"},"StoreDefaults")," config)."),(0,i.kt)("p",null,"To use KeyCloak, some configuration is needed."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose")," in the Hutch repo has an example of a keycloak instance suitable for development. This instance uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"postgreSQL")," service to store its data. Create a database on this service called ",(0,i.kt)("inlineCode",{parentName:"p"},"bitnami_keycloak"),". Then when keycloak starts, it will populate the database with tables."),(0,i.kt)("p",null,"There is some futher configuration once this is running before it can be used."),(0,i.kt)("h2",{id:"further-configuration"},"Further configuration"),(0,i.kt)("h3",{id:"create-a-realm"},"Create a Realm"),(0,i.kt)("p",null,"Minio in the sample ",(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose")," expects the realm to be called ",(0,i.kt)("inlineCode",{parentName:"p"},"hutch-dev"),"."),(0,i.kt)("h3",{id:"create-a-users"},"Create (a) User(s)"),(0,i.kt)("p",null,"Both MinIO and the TRE Controller API currently expect user tokens, so Hutch currently must have a user to get tokens for, which it does via the Password Grant Flow."),(0,i.kt)("p",null,"Additionally it's worth being aware that the TRE Controller expects an ",(0,i.kt)("strong",{parentName:"p"},"access token")," (so in future Hutch could use the Client Credentials flow), but Minio requires an ",(0,i.kt)("strong",{parentName:"p"},"identity token"),"."),(0,i.kt)("p",null,'In the realm created above, navigate to the Users tab and click "Add user". Give the user a username and click "Save". The new user will now appear in the Users tab.'),(0,i.kt)("h4",{id:"add-a-password"},"Add a password"),(0,i.kt)("p",null,'In the user\'s settings, go to the "Credentials" tab and click "Set password". Enter and verify a password and set "Temporary" to "off".'),(0,i.kt)("h4",{id:"add-required-minio-attributes-to-user"},"Add required MinIO attributes to user"),(0,i.kt)("p",null,"MinIO by default expects a claim in the user called ",(0,i.kt)("inlineCode",{parentName:"p"},"policy"),". This is an array which can contain one or more of the following: ",(0,i.kt)("inlineCode",{parentName:"p"},"consoleAdmin"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"readonly"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"readwrite"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"diagnostics")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"writeonly"),'. In the "Attributes" tab of the user created above, click "Add an attribute" and enter "policy" in the "Key" box, followed by one of the options previously listed in the "Value" box. To add another "policy", click "Add an attribute" underneath and once again enter "policy" in the "Key" box with another of the choices in the "Value" box.'),(0,i.kt)("h3",{id:"create-a-client-for-hutch"},"Create a Client for Hutch"),(0,i.kt)("p",null,"NOTE: You may wish to re-use the same client for Hutch and MinIO, since MinIO will only accept token from Hutch if they were requested using the MinIO Client Credentials."),(0,i.kt)("p",null,"General Settings:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"type: ",(0,i.kt)("inlineCode",{parentName:"li"},"OpenID Connect")),(0,i.kt)("li",{parentName:"ul"},"client id: e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"hutch-agent"))),(0,i.kt)("p",null,"Capability Config:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Client authentication: ",(0,i.kt)("inlineCode",{parentName:"li"},"ON")),(0,i.kt)("li",{parentName:"ul"},"Authentication Flow:",(0,i.kt)("ul",{parentName:"li",className:"contains-task-list"},(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Direct access grants",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},'This is OIDC\'s "Resource Owner Password Credentials Grant" and is currently all Hutch supports, because MinIO and the TRE Controller API expect user tokens, not client ones.')))))),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},'Do not check "Service account roles" or keycloak will try to log into MinIO as a service account, rather than the user\'s account. This would require additional configuration.')),(0,i.kt)("h3",{id:"add-a-client-scope-for-the-client"},"Add a Client Scope for the Client"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"This advice assumes the client is called ",(0,i.kt)("inlineCode",{parentName:"p"},"hutch-agent"),". Substitute ",(0,i.kt)("inlineCode",{parentName:"p"},"hutch-agent")," if using another client name.")),(0,i.kt)("p",null,"The MinIO instance in the ",(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose")," file expects a scope called ",(0,i.kt)("inlineCode",{parentName:"p"},"openid"),'. To create this, go to the "Client scopes" tab in the keycloak console and click "Create client scope". Call it "openid" and click "Save". Now create a mapper for the ',(0,i.kt)("inlineCode",{parentName:"p"},"policy"),' user attribute by going to the "Mappers" tab on the new scope and clicking "Configure a new mapper". Select "User Attribute" from the menu.'),(0,i.kt)("p",null,"Give the mapper the following settings:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Name: openid-mapper"),(0,i.kt)("li",{parentName:"ul"},"User Attribute: policy"),(0,i.kt)("li",{parentName:"ul"},"Token Claim Name: policy"),(0,i.kt)("li",{parentName:"ul"},"Claim JSON Type: String"),(0,i.kt)("li",{parentName:"ul"},"Add to ID token: on"),(0,i.kt)("li",{parentName:"ul"},"Add to access token: on"),(0,i.kt)("li",{parentName:"ul"},"Add to userinfo: on"),(0,i.kt)("li",{parentName:"ul"},"Multivalued: on"),(0,i.kt)("li",{parentName:"ul"},"Aggregate attribute values: on")),(0,i.kt)("p",null,'Then click "Save".'),(0,i.kt)("p",null,'Go back to the Client scopes tab and back into openid. Navigate to the scopes tab and click "Assign role". Select ',(0,i.kt)("inlineCode",{parentName:"p"},"default-role-hutch-dev"),' and click "Assign".'),(0,i.kt)("p",null,'Now go to the "Clients" tab and select the ',(0,i.kt)("inlineCode",{parentName:"p"},"hutch-agent"),'. Go to the "Client Scopes" tab ',(0,i.kt)("strong",{parentName:"p"},"in the middle of the screen"),' and click "Add client scope". Select ',(0,i.kt)("inlineCode",{parentName:"p"},"openid"),' from the menu and click "Add" choosing "Default" from the drop-down menu.'),(0,i.kt)("p",null,"Login Settings:"),(0,i.kt)("p",null,"not sure what is needed here as we aren't doing an interactive user login flow..."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Root URL should be Hutch's configured URL e.g. for development ",(0,i.kt)("inlineCode",{parentName:"li"},"http://host.docker.internal:5209")),(0,i.kt)("li",{parentName:"ul"},"Most other settings are URLs and for development can just be wildcarded with ",(0,i.kt)("inlineCode",{parentName:"li"},"*"))),(0,i.kt)("h3",{id:"configure-hutch"},"Configure Hutch"),(0,i.kt)("p",null,"After creating the client, the Credentials tab can be used to generate or view the client secret."),(0,i.kt)("p",null,"Hutch can then be configured with"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the keycloak URL e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"localhost:9090")),(0,i.kt)("li",{parentName:"ul"},"its client id e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"hutch-agent")),(0,i.kt)("li",{parentName:"ul"},"its client secret"),(0,i.kt)("li",{parentName:"ul"},"a username and password for a user to get a token on behalf of")))}p.isMDXComponent=!0}}]);