name: Publish Manager

on:
  workflow_dispatch: # manual trigger
    inputs:
      buildConfig:
        description: Build Configuration
        required: true
        default: release
  push:
    # branches: [main, support/*]
    branches: [feature/manager-CD]

env:
  CI_build-config: ${{ github.event.inputs.buildConfig || 'release' }}
  CI_dotnet-version: 6.0.x
  CI_node-version: "16"
  CI_publish-dir: publish
  CI_migrations-dir: migrations

  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true

jobs:
  generate-timestamp:
    runs-on: ubuntu-latest
    outputs:
      timestamp: ${{ steps.makestamp.outputs.time }}
    steps:
    - name: Make Timestamp
      id: makestamp
      uses: nanzm/get-time-action@v1.1
      with:
        format: "YYYYMMDDHHmmss"
    - name: Show timestamp
      run: |
        echo "${{ steps.makestamp.outputs.time }}"

  publish-sargassure:
    runs-on: ubuntu-latest
    env:
      CI_dotnet-project: ./app/HutchManager/HutchManager.csproj
      CI_artifact-name: manager-dotnet-6
      CI_client-package: manager-frontend
      CI_migrations-name: manager-migrations
    steps:
      - uses: actions/checkout@v2

      # 1. Build the client app
      # TODO: could move to separate job to parallelise in future
      # but not worth it until other parallel stuff is being done
      # since the dotnet publish depends sequentially on the client app build
      - uses: pnpm/action-setup@v2.0.1
        with:
          version: 6.30.0
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.CI_node-version }}
          cache: pnpm
      - run: >-
          pnpm i
          --filter ${{ env.CI_client-package }}
          --frozen-lockfile
      - run: >-
          pnpm
          --filter ${{ env.CI_client-package }}
          build

      # 2. Publish the dotnet app (with the built client app)
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.CI_dotnet-version }}
      - name: dotnet publish
        run: >-
          dotnet publish
          ${{ env.CI_dotnet-project }}
          -c ${{ env.CI_build-config }}
          -o ${{ env.CI_publish-dir }}
          /p:GitHash=${{ github.sha }}

      # TODO: binaries for db migrations during deployment?
      # 3. Publish migrations
      - name: dotnet ef migrations bundle
        run: >-
          dotnet tool restore &&
          dotnet ef migrations bundle
          -p ${{ env.CI_dotnet-project }}
          -o ${{ env.CI_migrations-dir }}
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.CI_migrations-name }}
          path: ${{ env.CI_migrations-dir }}

      # 4. Upload the built artifact
      - uses: edgarrc/action-7z@v1.0.5
        with:
          args: 7z a ${{ env.CI_publish-dir }}/${{ env.CI_artifact-name }}.zip ./${{ env.CI_publish-dir }}/*
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.CI_artifact-name }}
          path: ${{ env.CI_publish-dir }}/${{ env.CI_artifact-name }}.zip
